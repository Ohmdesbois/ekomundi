/**
 * Implements hook_permission().
 * /
function ekopoint_nodetitle_permission() {
  return array(
    'use PHP for title patterns' => array(
      'title' => t('Use PHP for title patterns'),
      'description' => t('Use PHP for title patterns.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for the node form.
 * /
function ekopoint_nodetitle_form_node_form_alter(&$form, &$form_state, $form_id) {

  if (ekopoint_nodetitle_get_setting($form['#node']->type) == ekopoint_nodetitle_ENABLED) {
    // We will autogenerate the title later, just hide the title field in the
    // meanwhile.
    $form['title']['#value'] = 'ekont';
    $form['title']['#type'] = 'value';
    $form['title']['#required'] = FALSE;
  dpm($form);
  }
  elseif (ekopoint_nodetitle_get_setting($form['#node']->type) == ekopoint_nodetitle_OPTIONAL) {
    $form['title']['#required'] = FALSE;
  }
}


/**
 * Implements hook_node_submit().
 *
 * Generate the node title as soon as the form has been submitted. That way
 * the node preview is shown right too.
 * /
function ekopoint_nodetitle_node_submit($node, $form, &$form_state) {
  $setting = ekopoint_nodetitle_get_setting($node->type);
  if ($setting == ekopoint_nodetitle_ENABLED || ($setting == ekopoint_nodetitle_OPTIONAL && empty($form_state['values']['title']))) {
    ekopoint_nodetitle_set_title($node);
  }
}

/**
 * Implements hook_node_presave().
 * /
function ekopoint_nodetitle_node_presave($node) {
  // If not yet done, generate the title now.
  if (ekopoint_nodetitle_is_needed($node)) {
    ekopoint_nodetitle_set_title($node);
  }
}

/**
 * Returns whether the auto nodetitle has to be set.
 * /
function ekopoint_nodetitle_is_needed($node) {
  return empty($node->ekopoint_nodetitle_applied) && ($setting = ekopoint_nodetitle_get_setting($node->type)) && !($setting == ekopoint_nodetitle_OPTIONAL && !empty($node->title));
}

/**
 * Sets the automatically generated nodetitle for the node
 * /
function ekopoint_nodetitle_set_title(&$node) {
  $types = node_type_get_types();
  $pattern = variable_get('ekont_pattern_' . $node->type, '');


  $terms=array(
    'domaine'=>(array) $node->field_tid_domaine_1['und'][0]['tid'],
    'action'=>(array) $node->field_tid_action_1['und'][0]['tid'],
    'objet'=> $node->field_tid_objet_1['und'][0]['tid'],

  );

  $node->changed = REQUEST_TIME;
  $node->title=_ekopoint_concat($terms);

  /*if (trim($pattern)) {
    $node->changed = REQUEST_TIME;
    $node->title = _ekopoint_nodetitle_patternprocessor($pattern, $node);
  }
  elseif ($node->nid) {
    $node->title = t('@type @node-id', array('@type' => $types[$node->type]->name, '@node-id' => $node->nid));
  }
  else {
    $node->title = t('@type', array('@type' => $types[$node->type]->name));
  }/* /
  // Ensure the generated title isn't too long.
  $node->title = substr($node->title, 0, 255);
  // With that flag we ensure we don't apply the title two times to the same
  // node. See ekopoint_nodetitle_is_needed().
  $node->ekopoint_nodetitle_applied = TRUE;
}


function _ekopoint_concat($terms){
  global $language ;
  global $user;
  $langcode =  $language->language ;
  $langcode='und';
  $output='';

  //recupere la conjugaison dans action suivant l'etape et le niveau.
    //$etape=taxonomy_term_load($terms['etape']);
    //$niveau=taxonomy_term_load($terms['niveau']);

    //$genre=$niveau->field_txt_genre_1[$langcode]['0']['value'];
     //$temps=$etape->field_txt_temps_1[$langcode]['0']['value'];
  //dpm(array($genre,$temps));
  $format_objet='';
  $format_actions='';
  foreach($terms['action'] as $tid){

    $action=taxonomy_term_load($tid);
    $infinitif=$action->field_txt_term_format_2[$langcode]['0']['value'];
    $conjugaison='"'.$infinitif.'" ';

    //recupere la formatage de l'objet
    $objet=taxonomy_term_load($terms['objet']);
    $format_objet=$objet->field_txt_term_format_1[$langcode]['0']['value'];

    //remplace ce que suivant l'action
    if(trim(drupal_strtolower($format_objet))=='ce que'){
    //dpm($action);

      $field=str_replace(' ','_',trim(drupal_strtolower($format_objet)));

      if(!empty($action->{'field_txt_'.$field.'_1'}[$langcode]['0']['value']) ){
        $format_objet=$action->{'field_txt_'.$field.'_1'}[$langcode]['0']['value'];
      }

      $format_after=$action->{'field_txt_'.$field.'_after_1'}[$langcode]['0']['value'];

    }
    else{
      $format_after=isset($action->field_txt_term_format_1[$langcode]) ? $action->field_txt_term_format_1[$langcode]['0']['value']: '';

    }
    $format_actions.=trim($conjugaison.$format_after).', ';
  }
  $format_actions=drupal_substr($format_actions,0,-2).' ';


  $format_domaines='';
  $first_domaine=true;
  foreach($terms['domaine'] as $tid){
    //recupere la formatage du domaine
    $domaine=taxonomy_term_load($tid);
    $format_domaine=$domaine->field_txt_term_format_1[$langcode]['0']['value'];
    if(!$first_domaine)
      $format_domaine=str_replace('dans le domaine',' ',$format_domaine);

    $format_domaines.=$format_domaine.', ';
    $first_domaine=false;
  }
  $format_domaines=drupal_substr($format_domaines,0,-2);

  $output=$format_objet.$format_actions.$format_domaines.'.';

/*
    $term=taxonomy_term_load($tid);
      //$voc_point[$vocabularies[$vid]->machine_name]=array('tid'=>$tid,'name'=>drupal_strtolower($term_det->name));
      $tname=i18n_taxonomy_term_name($term,$langcode);
      $voc_point[$vocabularies[$vid]->machine_name]=array('tid'=>$tid,'name'=>drupal_strtolower($tname));

  // * /

  return $output;
}




/**
 * Implements hook_node_operations().
 * /
function ekopoint_nodetitle_node_operations() {
  $operations = array(
    'nodetitle_update' => array(
      'label' => t('Update automatic nodetitles'),
      'callback' => 'ekopoint_nodetitle_operations_update',
    ),
  );
  return $operations;
}

/**
 * Callback function for updating node titles.
 * /
function ekopoint_nodetitle_operations_update($nodes) {
  foreach ($nodes as $nid) {
    $node = node_load($nid);
    if ($node && ekopoint_nodetitle_is_needed($node)) {
      $previous_title = $node->title;
      ekopoint_nodetitle_set_title($node);
      // Only save if the title has actually changed.
      if ($node->title != $previous_title) {
        node_save($node);
      }
    }
  }
}

/**
  * Helper function to generate the title according to the settings.
  *
  * @return a title string
  * /
function _ekopoint_nodetitle_patternprocessor($pattern, $node) {
  // Replace tokens.
  $output = token_replace($pattern, array('node' => $node), array('sanitize' => FALSE));
  // Evalute PHP.
  if (variable_get('ekont_php_' . $node->type, 0)) {
    $output = ekopoint_nodetitle_eval($output, $node);
  }
  // Strip tags.
  $output = preg_replace('/[\t\n\r\0\x0B]/', '', strip_tags($output));
  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter() for the node type form.
 * /
function ekopoint_nodetitle_form_node_type_form_alter(&$form, &$form_state) {
  if($form['#node_type']->type=='ekopoint'){
    $default_value = ekopoint_nodetitle_get_setting($form['#node_type']->type);
    $form['ekopoint_nodetitle'] = array(
      '#type' => 'fieldset',
      '#title' => t('Ekopoint title generation'),
      '#weight' => 0,
      '#collapsible' => TRUE,
      '#collapsed' => !$default_value,
      '#group' => 'additional_settings',
      '#attached' => array(
        'js' => array(
          'auto-nodetitle' => drupal_get_path('module', 'ekopoint_nodetitle') . '/ekopoint_nodetitle.js',
        ),
      ),
    );
    $form['ekopoint_nodetitle']['ekont'] = array(
      '#type' => 'radios',
      '#default_value' => $default_value,
      '#options' => array(
        t('Disabled'),
        t('Automatically generate the title and hide the title field'),
      )
    );

  }
}

/**
 * Gets the auto node title setting associated with the given content type.
 * /
function ekopoint_nodetitle_get_setting($type) {
  return variable_get('ekont_' . $type, ekopoint_nodetitle_DISABLED);
}

/**
 * Evaluates php code and passes $node to it.
 * /
function ekopoint_nodetitle_eval($code, $node) {
  ob_start();
  print eval('?>' . $code);
  $output = ob_get_contents();
  ob_end_clean();
  return $output;
}

/**
 * Implements hook_node_type().
 * /
function ekopoint_nodetitle_node_type($op, $info) {
  switch ($op) {
    case 'delete':
      variable_del('ekont_' . $info->type);
      //variable_del('ekont_pattern_' . $info->type);
      //variable_del('ekont_php_' . $info->type);
      break;
    case 'update':
      if (!empty($info->old_type) && $info->old_type != $info->type) {
        variable_set('ekont_' . $info->type, ekopoint_nodetitle_get_setting($info->old_type));
        //variable_set('ekont_pattern_' . $info->type, variable_get('ekont_pattern_' . $info->old_type, ''));
        //variable_set('ekont_php_' . $info->type, variable_get('ekont_php_' . $info->old_type, ''));
        variable_del('ekont_' . $info->old_type);
        //variable_del('ekont_pattern_' . $info->old_type);
        //variable_del('ekont_php_' . $info->old_type);
      }
      break;
  }
}

/*
function ekopoint_nodetitle_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
 echo $delta;
    }
    // Ensure consecutive deltas.

  }
}

function ekopoint_nodetitle_views_post_execute(&$view) {
  //dpm($view);
}
function ekopoint_nodetitle_views_pre_render(&$view) {
  //dpm($view);
}
*/
